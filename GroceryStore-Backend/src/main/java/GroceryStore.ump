use GroceryStoreStates.ump;
namespace ca.mcgill.ecse321.GroceryStore.model;

//add a basket option, potentially a state for each order


class Store{
  Integer storeID;
  address;
  0..1 -> * Employee employee;
  0..1 -> * Item item;
  0..1 -> * Holiday holiday;

  0..1 -> * BusinessHour businessHour;
  const int MAXPICKUPS = 10;
  const int MAXSHIPPING = 10;
  int currentActivePickup=0;
  int currentActiveDelivery=0;
}



class Owner{
  0..1 -> 1 Store store;
  unique username;
  password;
  unique email;
}


class Employee{
  unique username;
  password;
  unique email;
  address;
  0..1 -> * WorkShift workShift;
  0..1 -> * Order order;
}

class Customer{
  unique username;
  password;
  unique email;
  address;
  0..1 -> * Order order;

}

class WorkShift{
  enum DayOfWeek { Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday }
  Time startTime;
  Time endTime;
  Integer shiftID;
  DayOfWeek day;
}

class BusinessHour{
  Integer hoursID;
  Time startTime;
  Time endTime;
  DayOfWeek day;
  enum DayOfWeek { Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday }
}

class Holiday{
  unique name;
  Date startDate;
  Date endDate;
}

class Item{
  unique name;
  Boolean purchasable; //stuff that can be bought online, if false only available in person
  int price;
  description;
  int stock;
  int totalPurchased;
}

class PurchasedItem{
  * -> 1 Item item;
  Integer purchasedItemID;
  int itemQuantity;
}

class Order{
  abstract;
  * -> 1 Store store;
  Integer confirmationNumber;
  0..1 -> * PurchasedItem purchasedItem;
  int totalCost;

}

class DeliveryOrder{
  isA Order;
  const int SHIPPINGFEE = 30;
  shippingAddress;
}

class PickupOrder{
  isA Order;
  enum PaymentMethod { CreditCard, Cash };
  PaymentMethod paymentMethod;

}


